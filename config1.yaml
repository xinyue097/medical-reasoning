# MedReason Configuration
model_name_or_path: "deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B"
model_revision: main
torch_dtype: bfloat16
attn_implementation: sdpa
trust_remote_code: true

# LoRA Configuration
use_peft: true
lora_r: 16
lora_alpha: 32
lora_dropout: 0.05
lora_target_modules: ["q_proj", "v_proj", "k_proj", "o_proj", "gate_proj", "up_proj", "down_proj"]

# Dataset Configuration  
dataset_name: "openlifescienceai/medmcqa"
dataset_prompt_column: "question"
dataset_train_split: "train" 
dataset_test_split: "validation"
max_steps: -1

# Training Configuration
output_dir: "./outputs/medreason"
overwrite_output_dir: false
# resume_from_checkpoint: "./outputs/medreason/checkpoint-200"  # Specify exact checkpoint
seed: 42
bf16: true
learning_rate: 1.0e-06
num_train_epochs: 1
gradient_checkpointing: true
gradient_checkpointing_kwargs:
  use_reentrant: false
lr_scheduler_type: cosine_with_min_lr
lr_scheduler_kwargs:
  min_lr_rate: 0.1
warmup_ratio: 0.1

# Torch Compile - DISABLED due to cuda memory issues
torch_compile: false
# torch_compile_mode: "reduce-overhead"

# Batch Configuration
per_device_train_batch_size: 12
per_device_eval_batch_size: 8
gradient_accumulation_steps: 4
generation_batch_size: 96
dataloader_num_workers: 0 
dataloader_pin_memory: false 

# Sequence Lengths
max_prompt_length: 512
max_completion_length: 2048

# Evaluation
do_eval: true
eval_strategy: "steps"
eval_steps: 200
eval_delay: 100

# GRPO Parameters
num_generations: 4
temperature: 0.6
top_p: 0.95

# Reward Functions
reward_funcs:
  - "multiple_choice"
  - "tag_count"
  - "reasoning_steps"
  - "repetition_penalty"
  - "format"
  - "format_partial_credit"

reward_weights: # 3 points in total
  - 1.0
  - 0.5
  - 0.5
  - 0.4
  - 0.6
  - 0.5

# Logging - Enhanced for better monitoring
log_level: "info"
logging_strategy: "steps"
logging_steps: 5
logging_first_step: true
log_completions: true
report_to: ["wandb"]
save_strategy: "steps"
save_steps: 200

# Optimizer
optim: "adamw_torch"
weight_decay: 0.01
use_liger_kernel: true

# System prompt
system_prompt: "You are a helpful medical expert that provides well-reasoned medical responses. CRITICAL: You MUST follow this exact format pattern: r\"^<think>\\n.*?\\n</think>\\n<answer>\\n.*?\\n</answer>$\"

FORMAT REQUIREMENTS:
- Start with <think>, add newline, include your reasoning, end with </think> and newline
- Then, start with <answer>, add newline, provide ONLY a single letter (A, B, C, D) OR \"The answer is X." where X is A, B, C, or D, end with </answer>
- Pay close attention to the placement of newlines (\\n) in your response. Each tag and answer must be separated by a newline exactly as shown.

EXAMPLE:
<think>
This medical question requires analyzing each option. A) discusses... B) suggests... C) indicates... D) proposes... Based on medical knowledge, B is correct because...
</think>
<answer>
B
</answer>

Your answer section must contain ONLY: a single letter (A, B, C, D) OR \"The answer is X." where X is exactly A, B, C, or D - no other text."

# Chat template - Optimized for DeepSeek model (from config_demo.yaml)
chat_template: "{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='') %}{%- for message in messages %}{%- if message['role'] == 'system' %}{% set ns.system_prompt = message['content'] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message['role'] == 'user' %}{%- set ns.is_tool = false -%}{{'<｜User｜>' + message['content']}}{%- endif %}{%- if message['role'] == 'assistant' and message['content'] is none %}{%- set ns.is_tool = false -%}{%- for tool in message['tool_calls']%}{%- if not ns.is_first %}{{'<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>' + tool['type'] + '<｜tool▁sep｜>' + tool['function']['name'] + '\\n' + '```json' + '\\n' + tool['function']['arguments'] + '\\n' + '```' + '<｜tool▁call▁end｜>'}}{%- set ns.is_first = true -%}{%- else %}{{'\\n' + '<｜tool▁call▁begin｜>' + tool['type'] + '<｜tool▁sep｜>' + tool['function']['name'] + '\\n' + '```json' + '\\n' + tool['function']['arguments'] + '\\n' + '```' + '<｜tool▁call▁end｜>'}}{{'<｜tool▁calls▁end｜><｜end▁of▁sentence｜>'}}{%- endif %}{%- endfor %}{%- endif %}{%- if message['role'] == 'assistant' and message['content'] is not none %}{%- if ns.is_tool %}{{'<｜tool▁outputs▁end｜>' + message['content'] + '<｜end▁of▁sentence｜>'}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message['content'] %}{{'<｜Assistant｜>' + content + '<｜end▁of▁sentence｜>'}}{%- endif %}{%- endif %}{%- if message['role'] == 'tool' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{'<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>' + message['content'] + '<｜tool▁output▁end｜>'}}{%- set ns.is_output_first = false %}{%- else %}{{'\\n<｜tool▁output▁begin｜>' + message['content'] + '<｜tool▁output▁end｜>'}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{'<｜tool▁outputs▁end｜>'}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{'<｜Assistant｜>'}}{% endif %}"