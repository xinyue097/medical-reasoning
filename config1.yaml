# MedReason Configuration
model_name_or_path: "deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B"
model_revision: main
torch_dtype: bfloat16
attn_implementation: sdpa
trust_remote_code: true

# LoRA Configuration
use_peft: true
lora_r: 16
lora_alpha: 32
lora_dropout: 0.05
lora_target_modules: ["q_proj", "v_proj", "k_proj", "o_proj", "gate_proj", "up_proj", "down_proj"]

# Dataset Configuration  
dataset_name: "openlifescienceai/medmcqa"
dataset_prompt_column: "question"
dataset_train_split: "train" 
dataset_test_split: "validation"
max_steps: 1200

# Training Configuration
output_dir: "./outputs/medreason"
overwrite_output_dir: true
seed: 42
bf16: true
learning_rate: 3.5e-5
num_train_epochs: 1
gradient_checkpointing: true

# Torch Compile - DISABLED due to cuda memory issues
torch_compile: false
# torch_compile_mode: "reduce-overhead"

# Batch Configuration
per_device_train_batch_size: 20
per_device_eval_batch_size: 8
gradient_accumulation_steps: 2
generation_batch_size: 80
dataloader_num_workers: 0 
dataloader_pin_memory: false 

# Sequence Lengths
max_prompt_length: 512
max_completion_length: 1024

# Evaluation
do_eval: true
eval_strategy: "steps"
eval_steps: 400
eval_delay: 100

# GRPO Parameters
num_generations: 2
temperature: 0.6
top_p: 0.95

# Reward Functions
reward_funcs: ["multiple_choice", "format"]
reward_weights: [1.0, 0.5]

# Logging
log_level: "warning"
logging_strategy: "steps"
logging_steps: 5
report_to: ["wandb"]
save_strategy: "steps"
save_steps: 400

# Optimizer
optim: "adamw_torch"
weight_decay: 0.01

# System prompt - FIXED FORMATTING
system_prompt: |
  You are a helpful AI assistant that provides well-reasoned and detailed medical responses. 
  You first think about the reasoning process as an internal monologue and then provide the user with the answer. 
  You MUST respond in this EXACT format with newlines as shown:
  
  <think>
  Your detailed reasoning here
  </think>
  <answer>
  A
  </answer>
  
  Example:
  <think>
  This question is about pneumonia. I need to identify the most common bacterial cause. Streptococcus pneumoniae is indeed the leading cause of community-acquired bacterial pneumonia in adults.
  </think>
  <answer>
  A
  </answer>
  
  CRITICAL: Start with <think> followed by newline, end with newline before </think>, then newline, then <answer> followed by newline, then your single letter answer, then newline before </answer>.


# # Chat template 
# chat_template: "{% if not add_generation_prompt is defined %}{% set add_generation_prompt = false %}{% endif %}{% set ns = namespace(is_first=false, is_tool=false, is_output_first=true, system_prompt='') %}{%- for message in messages %}{%- if message['role'] == 'system' %}{% set ns.system_prompt = message['content'] %}{%- endif %}{%- endfor %}{{bos_token}}{{ns.system_prompt}}{%- for message in messages %}{%- if message['role'] == 'user' %}{%- set ns.is_tool = false -%}{{'<｜User｜>' + message['content']}}{%- endif %}{%- if message['role'] == 'assistant' and message['content'] is none %}{%- set ns.is_tool = false -%}{%- for tool in message['tool_calls']%}{%- if not ns.is_first %}{{'<｜Assistant｜><｜tool▁calls▁begin｜><｜tool▁call▁begin｜>' + tool['type'] + '<｜tool▁sep｜>' + tool['function']['name'] + '\n' + '```json' + '\n' + tool['function']['arguments'] + '\n' + '```' + '<｜tool▁call▁end｜>'}}{%- set ns.is_first = true -%}{%- else %}{{'\\n' + '<｜tool▁call▁begin｜>' + tool['type'] + '<｜tool▁sep｜>' + tool['function']['name'] + '\n' + '```json' + '\n' + tool['function']['arguments'] + '\n' + '```' + '<｜tool▁call▁end｜>'}}{{'<｜tool▁calls▁end｜><｜end▁of▁sentence｜>'}}{%- endif %}{%- endfor %}{%- endif %}{%- if message['role'] == 'assistant' and message['content'] is not none %}{%- if ns.is_tool %}{{'<｜tool▁outputs▁end｜>' + message['content'] + '<｜end▁of▁sentence｜>'}}{%- set ns.is_tool = false -%}{%- else %}{% set content = message['content'] %}{{'<｜Assistant｜>' + content + '<｜end▁of▁sentence｜>'}}{%- endif %}{%- endif %}{%- if message['role'] == 'tool' %}{%- set ns.is_tool = true -%}{%- if ns.is_output_first %}{{'<｜tool▁outputs▁begin｜><｜tool▁output▁begin｜>' + message['content'] + '<｜tool▁output▁end｜>'}}{%- set ns.is_output_first = false %}{%- else %}{{'\\n<｜tool▁output▁begin｜>' + message['content'] + '<｜tool▁output▁end｜>'}}{%- endif %}{%- endif %}{%- endfor -%}{% if ns.is_tool %}{{'<｜tool▁outputs▁end｜>'}}{% endif %}{% if add_generation_prompt and not ns.is_tool %}{{'<｜Assistant｜>'}}{% endif %}"